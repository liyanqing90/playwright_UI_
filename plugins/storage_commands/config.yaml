# 存储命令插件配置文件

# 插件基本信息
plugin:
  name: "Storage Commands Plugin"
  version: "1.0.0"
  description: "提供全面的数据存储和状态管理功能"
  author: "Automation Team"
  category: "storage"
  tags: [ "storage", "variables", "cache", "persistence", "state" ]
  priority: 5
  dependencies: [ ]

# 通用设置
general:
  # 日志设置
  logging:
    level: "INFO"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    file: "logs/storage_commands.log"
    max_size: "10MB"
    backup_count: 5
  
  # 数据目录
  data_directory: "data/storage"
  
  # 编码设置
  encoding: "utf-8"
  
  # 时区设置
  timezone: "Asia/Shanghai"
  
  # 语言设置
  language: "zh-CN"

# 变量管理配置
variables:
  # 启用变量管理
  enabled: true
  
  # 默认作用域
  default_scope: "global"
  
  # 作用域配置
  scopes:
    global:
      description: "全局作用域，整个应用程序可见"
      max_variables: 1000
      default_ttl: null  # 永不过期
    session:
      description: "会话作用域，当前会话可见"
      max_variables: 500
      default_ttl: 86400  # 24小时
    test:
      description: "测试作用域，当前测试可见"
      max_variables: 200
      default_ttl: 3600   # 1小时
    step:
      description: "步骤作用域，当前步骤可见"
      max_variables: 100
      default_ttl: 300    # 5分钟
    temporary:
      description: "临时作用域，短期使用"
      max_variables: 50
      default_ttl: 60     # 1分钟
  
  # 变量监听器
  listeners:
    enabled: true
    log_changes: true
    notify_external: false
  
  # 自动清理
  auto_cleanup:
    enabled: true
    interval: 300  # 5分钟
    cleanup_expired: true
    cleanup_empty_scopes: true

# 缓存管理配置
cache:
  # 启用缓存
  enabled: true
  
  # 缓存大小限制
  max_size: 1000
  
  # 默认TTL（秒）
  default_ttl: 3600
  
  # 最大TTL（秒）
  max_ttl: 86400
  
  # 内存限制（MB）
  max_memory: 100
  
  # 淘汰策略
  eviction_policy: "lru"  # lru, lfu, fifo, random
  
  # 自动清理
  auto_cleanup:
    enabled: true
    interval: 600  # 10分钟
    cleanup_expired: true
    cleanup_threshold: 0.8  # 使用率超过80%时清理
  
  # 预加载策略
  preload:
    enabled: false
    keys: [ ]
    warmup_on_start: false
  
  # 压缩设置
  compression:
    enabled: false
    algorithm: "gzip"  # gzip, lz4, zstd
    threshold: 1024    # 超过1KB压缩
  
  # 统计信息
  statistics:
    enabled: true
    track_access: true
    track_performance: true

# 持久化配置
persistence:
  # 启用持久化
  enabled: true
  
  # 存储路径
  storage_path: "data/storage"
  
  # 数据库配置
  database:
    type: "sqlite"  # sqlite, mysql, postgresql
    file: "storage.db"
    connection_pool: 5
    timeout: 30
    
    # SQLite特定配置
    sqlite:
      journal_mode: "WAL"
      synchronous: "NORMAL"
      cache_size: 2000
      temp_store: "MEMORY"
  
  # 序列化格式
  serialization:
    default_format: "json"  # json, pickle, binary, string
    formats:
      json:
        ensure_ascii: false
        indent: null
        sort_keys: false
      pickle:
        protocol: 4
        fix_imports: true
      binary:
        encoding: "base64"
  
  # 备份设置
  backup:
    enabled: true
    interval: 86400  # 24小时
    max_backups: 7
    backup_path: "data/backups"
    compression: true
  
  # 数据迁移
  migration:
    enabled: true
    version_tracking: true
    auto_migrate: true
  
  # 性能优化
  performance:
    batch_size: 100
    transaction_timeout: 30
    connection_timeout: 10
    retry_attempts: 3
    retry_delay: 1

# 清理任务配置
cleanup:
  # 启用自动清理
  enabled: true
  
  # 清理间隔（秒）
  interval: 3600
  
  # 清理策略
  strategies:
    # 清理过期数据
    expired_data:
      enabled: true
      priority: 1
    
    # 清理空作用域
    empty_scopes:
      enabled: true
      priority: 2
    
    # 清理大对象
    large_objects:
      enabled: true
      priority: 3
      size_threshold: "1MB"
    
    # 清理旧数据
    old_data:
      enabled: false
      priority: 4
      age_threshold: 604800  # 7天
  
  # 清理报告
  reporting:
    enabled: true
    log_results: true
    notify_on_error: true

# 安全配置
security:
  # 访问控制
  access_control:
    enabled: false
    require_authentication: false
    allowed_users: [ ]
    allowed_roles: [ ]
  
  # 数据加密
  encryption:
    enabled: false
    algorithm: "AES-256-GCM"
    key_rotation: false
    key_rotation_interval: 2592000  # 30天
  
  # 审计日志
  audit:
    enabled: false
    log_all_operations: false
    log_sensitive_operations: true
    retention_period: 2592000  # 30天
  
  # 数据验证
  validation:
    enabled: true
    validate_types: true
    validate_size: true
    max_key_length: 255
    max_value_size: "10MB"
    forbidden_keys: [ "password", "secret", "token" ]

# 性能配置
performance:
  # 并发控制
  concurrency:
    max_threads: 10
    thread_pool_size: 5
    queue_size: 100
  
  # 内存管理
  memory:
    max_memory_usage: "500MB"
    gc_threshold: 0.8
    memory_monitoring: true
  
  # 缓存优化
  cache_optimization:
    enabled: true
    prefetch_enabled: false
    compression_enabled: false
    deduplication_enabled: true
  
  # 批处理
  batch_processing:
    enabled: true
    batch_size: 50
    batch_timeout: 5
    parallel_batches: true

# 监控配置
monitoring:
  # 启用监控
  enabled: true
  
  # 指标收集
  metrics:
    enabled: true
    collection_interval: 60
    retention_period: 86400
    
    # 收集的指标
    collect:
      - "operation_count"
      - "operation_duration"
      - "memory_usage"
      - "cache_hit_rate"
      - "error_rate"
      - "storage_size"
  
  # 健康检查
  health_check:
    enabled: true
    check_interval: 300
    timeout: 10
    
    # 检查项目
    checks:
      - "database_connection"
      - "memory_usage"
      - "disk_space"
      - "cache_status"
  
  # 告警设置
  alerts:
    enabled: false
    thresholds:
      memory_usage: 0.9
      error_rate: 0.1
      response_time: 5.0
    
    # 通知方式
    notifications:
      email: false
      webhook: false
      log: true

# 命令映射
commands:
  # 基础存储命令
  store_variable:
    aliases: [ "set_var", "store_var" ]
    description: "存储变量到指定作用域"
    parameters:
      name: "变量名称"
      value: "变量值"
      scope: "作用域（可选，默认global）"
      expression: "表达式（可选）"
      ttl: "生存时间（秒，可选）"
      metadata: "元数据（可选）"
    examples:
      - "store_variable: {name: 'user_id', value: '12345', scope: 'session'}"
      - "store_variable: {name: 'result', expression: '${var1} + ${var2}'}"
  
  store_text:
    aliases: [ "save_text" ]
    description: "存储元素文本内容"
    parameters:
      variable_name: "变量名称"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "store_text: {variable_name: 'page_title', scope: 'test'}"
  
  store_attribute:
    aliases: [ "save_attr" ]
    description: "存储元素属性值"
    parameters:
      variable_name: "变量名称"
      attribute: "属性名称"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "store_attribute: {variable_name: 'link_url', attribute: 'href'}"
  
  save_element_count:
    aliases: [ "count_elements" ]
    description: "保存元素数量"
    parameters:
      variable_name: "变量名称"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "save_element_count: {variable_name: 'button_count'}"
  
  # 扩展存储命令
  store_json:
    aliases: [ "save_json" ]
    description: "存储JSON数据"
    parameters:
      variable_name: "变量名称"
      json_data: "JSON数据"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "store_json: {variable_name: 'config', json_data: {'key': 'value'}}"
  
  store_list:
    aliases: [ "save_list" ]
    description: "存储列表数据"
    parameters:
      variable_name: "变量名称"
      list_data: "列表数据"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "store_list: {variable_name: 'items', list_data: ['a', 'b', 'c']}"
  
  store_expression:
    aliases: [ "calc_store" ]
    description: "计算表达式并存储结果"
    parameters:
      variable_name: "变量名称"
      expression: "数学表达式"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "store_expression: {variable_name: 'total', expression: '${price} * ${quantity}'}"
  
  get_variable:
    aliases: [ "retrieve_var", "fetch_var" ]
    description: "获取变量值"
    parameters:
      variable_name: "变量名称"
      scope: "作用域（可选）"
      default: "默认值（可选）"
      target_variable: "目标变量名（可选）"
    examples:
      - "get_variable: {variable_name: 'user_id', target_variable: 'current_user'}"
  
  delete_variable:
    aliases: [ "remove_var", "del_var" ]
    description: "删除变量"
    parameters:
      variable_name: "变量名称"
      scope: "作用域（可选）"
    examples:
      - "delete_variable: {variable_name: 'temp_data', scope: 'step'}"
  
  list_variables:
    aliases: [ "show_vars", "list_vars" ]
    description: "列出变量"
    parameters:
      scope: "作用域（可选，为空则列出所有）"
      target_variable: "目标变量名（可选）"
    examples:
      - "list_variables: {scope: 'session', target_variable: 'session_vars'}"
  
  clear_scope:
    aliases: [ "clear_vars" ]
    description: "清空作用域中的所有变量"
    parameters:
      scope: "作用域名称"
    examples:
      - "clear_scope: {scope: 'temporary'}"
  
  # 缓存命令
  set_cache:
    aliases: [ "cache_set" ]
    description: "设置缓存"
    parameters:
      key: "缓存键"
      value: "缓存值"
      ttl: "生存时间（秒，可选）"
    examples:
      - "set_cache: {key: 'api_response', value: '${response}', ttl: 300}"
  
  get_cache:
    aliases: [ "cache_get" ]
    description: "获取缓存"
    parameters:
      key: "缓存键"
      default: "默认值（可选）"
      target_variable: "目标变量名（可选）"
    examples:
      - "get_cache: {key: 'api_response', target_variable: 'cached_data'}"
  
  delete_cache:
    aliases: [ "cache_del" ]
    description: "删除缓存"
    parameters:
      key: "缓存键"
    examples:
      - "delete_cache: {key: 'old_data'}"
  
  clear_cache:
    aliases: [ "cache_clear" ]
    description: "清空所有缓存"
    parameters: { }
    examples:
      - "clear_cache: {}"
  
  cache_stats:
    aliases: [ "cache_info" ]
    description: "获取缓存统计信息"
    parameters:
      target_variable: "目标变量名（可选）"
    examples:
      - "cache_stats: {target_variable: 'cache_info'}"
  
  # 持久化命令
  save_persistent:
    aliases: [ "persist_save" ]
    description: "保存持久化数据"
    parameters:
      key: "数据键"
      value: "数据值"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
      format: "序列化格式（可选）"
      metadata: "元数据（可选）"
    examples:
      - "save_persistent: {key: 'user_settings', value: '${settings}', format: 'json'}"
  
  load_persistent:
    aliases: [ "persist_load" ]
    description: "加载持久化数据"
    parameters:
      key: "数据键"
      scope: "作用域（可选）"
      default: "默认值（可选）"
      target_variable: "目标变量名（可选）"
    examples:
      - "load_persistent: {key: 'user_settings', target_variable: 'settings'}"
  
  delete_persistent:
    aliases: [ "persist_del" ]
    description: "删除持久化数据"
    parameters:
      key: "数据键"
      scope: "作用域（可选）"
    examples:
      - "delete_persistent: {key: 'temp_config'}"
  
  export_data:
    aliases: [ "data_export" ]
    description: "导出数据到文件"
    parameters:
      file_path: "文件路径"
      scope: "作用域（可选）"
    examples:
      - "export_data: {file_path: 'backup/data.json', scope: 'global'}"
  
  import_data:
    aliases: [ "data_import" ]
    description: "从文件导入数据"
    parameters:
      file_path: "文件路径"
      target_variable: "目标变量名（可选）"
    examples:
      - "import_data: {file_path: 'backup/data.json', target_variable: 'import_count'}"
  
  # 批量操作命令
  batch_store:
    aliases: [ "bulk_store" ]
    description: "批量存储变量"
    parameters:
      variables: "变量字典"
      scope: "作用域（可选）"
      ttl: "生存时间（可选）"
    examples:
      - "batch_store: {variables: {'var1': 'value1', 'var2': 'value2'}, scope: 'test'}"
  
  batch_get:
    aliases: [ "bulk_get" ]
    description: "批量获取变量"
    parameters:
      variable_names: "变量名列表"
      scope: "作用域（可选）"
      target_variable: "目标变量名（可选）"
    examples:
      - "batch_get: {variable_names: ['var1', 'var2'], target_variable: 'batch_result'}"
  
  batch_delete:
    aliases: [ "bulk_delete" ]
    description: "批量删除变量"
    parameters:
      variable_names: "变量名列表"
      scope: "作用域（可选）"
    examples:
      - "batch_delete: {variable_names: ['temp1', 'temp2'], scope: 'temporary'}"
  
  # 管理命令
  cleanup_storage:
    aliases: [ "storage_cleanup" ]
    description: "清理存储空间"
    parameters:
      target_variable: "目标变量名（可选）"
    examples:
      - "cleanup_storage: {target_variable: 'cleanup_result'}"
  
  storage_stats:
    aliases: [ "storage_info" ]
    description: "获取存储统计信息"
    parameters:
      target_variable: "目标变量名（可选）"
    examples:
      - "storage_stats: {target_variable: 'storage_info'}"

# 使用示例
examples:
  basic_usage:
    description: "基本变量存储和获取"
    steps:
      - action: "store_variable"
        params: { name: "username", value: "admin", scope: "session" }
      - action: "get_variable"
        params: { variable_name: "username", target_variable: "current_user" }
  
  expression_calculation:
    description: "表达式计算和存储"
    steps:
      - action: "store_variable"
        params: { name: "price", value: 100 }
      - action: "store_variable"
        params: { name: "quantity", value: 3 }
      - action: "store_expression"
        params: { variable_name: "total", expression: "${price} * ${quantity}" }
  
  cache_usage:
    description: "缓存使用示例"
    steps:
      - action: "set_cache"
        params: { key: "api_data", value: "${response}", ttl: 300 }
      - action: "get_cache"
        params: { key: "api_data", target_variable: "cached_response" }
  
  persistence_example:
    description: "持久化数据示例"
    steps:
      - action: "save_persistent"
        params: { key: "user_config", value: "${config}", format: "json" }
      - action: "load_persistent"
        params: { key: "user_config", target_variable: "loaded_config" }
  
  batch_operations:
    description: "批量操作示例"
    steps:
      - action: "batch_store"
        params:
          variables:
            var1: "value1"
            var2: "value2"
            var3: "value3"
          scope: "test"
      - action: "batch_get"
        params: { variable_names: [ "var1", "var2", "var3" ], target_variable: "batch_result" }

# 依赖项
dependencies:
  required:
    - "sqlite3"  # 内置模块
    - "json"     # 内置模块
    - "threading" # 内置模块
    - "pathlib"  # 内置模块
  
  optional:
    - "redis"     # Redis缓存支持
    - "pymongo"   # MongoDB支持
    - "psycopg2"  # PostgreSQL支持
    - "mysql-connector-python"  # MySQL支持

# 版本兼容性
compatibility:
  python_version: ">=3.7"
  framework_version: ">=1.0.0"

# 许可证
license: "MIT"

# 更新日志
changelog:
  "1.0.0":
    date: "2024-01-15"
    changes:
      - "初始版本发布"
      - "支持基本变量存储和管理"
      - "支持缓存功能"
      - "支持持久化存储"
      - "支持批量操作"
      - "支持多种作用域"
      - "支持TTL过期机制"
      - "支持数据序列化"
      - "支持自动清理"
      - "支持统计和监控"